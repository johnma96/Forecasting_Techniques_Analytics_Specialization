b=2
str(b)
install.packages("languageserver")
D = read.table("salario.mpio.med.dat",header=TRUE,stringsAsFactors=FALSE)
LS
ls
dir
dirname()
install.packages(c("callr", "pillar", "stringr"))
D = read.table("salario.mpio.med.dat",header=TRUE,stringsAsFactors=FALSE)
read.table()
D = read.table("D:\Users\Usuario\Desktop\Ejemplo_RegLineal_R\salario.mpio.med.dat",header=TRUE,stringsAsFactors=FALSE)
D = read.table("D:\\Usuario\\Desktop\\Ejemplo_RegLineal_R\\salario.mpio.med.dat",header=TRUE,stringsAsFactors=FALSE)
getwd()
setwd("D:\\Usuario\\Desktop\\Ejemplo_RegLineal_R\\)
getwd()
setwd("D:\\Usuario\\Desktop\\Ejemplo_RegLineal_R)
setwd("D:\\Usuario\\Desktop\\Ejemplo_RegLineal_R")
setwd("D:\\Usuario\\Desktop\\Ejemplo_RegLineal_R\\")
getwd()
setwd("D:/Usuario/Desktop/Ejemplo_RegLineal_R/")
# Development of project No. 1 Forecasting Techniques
# Authors: Camilo Cabrera - John Mario Montoya
# Libraries
library(ggplot2)
require(fpp2)
library(ggfortify)
source("medidas.r")
setwd("G:/Otros ordenadores/Mi PC/Maestria_Sem_II/TecnicasPronostico/Project1")
# Development of project No. 1 Forecasting Techniques
# Authors: Camilo Cabrera - John Mario Montoya
# Libraries
library(ggplot2)
require(fpp2)
library(ggfortify)
source("medidas.r")
# Remove variables on memory
rm(list=ls())
# Load data
# Total quarterly beer production in Australia (in megalitres)
# From 1956:Q1 to 2008:Q3
y = ts(ausbeer,frequency=4,start=c(1956,01)) #frecuency = 4 --> Quarters
#----- cross-validation
n = length(y)
len_yf = 4 * 10 # 4 * num years for test data (10 in this case) aprox 80-20
yi = ts(y[1:(n-len_yf)],start=c(time(y)[1]),frequency=4)
yf = ts(y[(n-len_yf+1):n],start=c( tail(time(yi),n=1) +0.25 ),frequency=4)
# Plot data in train and test
plot( yi,type="l", col="black",                   # Plot first time series
ylim = c(min(yi,yf), max(yi,yf)),
xlim=c(time(y)[1],tail(time(y),n=1)),
main="Producción trimestral de cerveza en Australia",
xlab="Año",
ylab="Megalitros")
lines(yf,,type="l", col="red")                  # Plot second time series
text_legend = c("Train", "Test")
legend("bottomright",                          # Add legend to plot
,legend=text_legend,
,text.width = strwidth(text_legend)[1]*2
,lty = 1,
,col = 1:2
)
# autoplot(y, geom = "line", ts.colour = ('#cd1818')) #Option 1
lyi = log(yi)
ti = seq(1,length(yi))
# Estimate auxiliar model log - linear
mod.llin = lm(lyi~ti)
# save parameters of model log-linear
b0.est = mod.llin$coefficient[1]
b1.est = mod.llin$coefficient[2]
# Save data in dataframe
Ds = data.frame(yi,ti)
# Use nls function for adjust
mod.exp = nls(yi~exp(beta0+beta1*ti),
data=Ds,start=list(beta0=b0.est, beta1=b1.est))
# Results
summary(mod.exp)
summary(mod.exp)
M.exp = medidas(mod.exp,yi,2)
source("medidas.r")
M.exp = medidas(mod.exp,yi,2)
str(M.exp)
View(M.exp)
mod.exp
M.exp
